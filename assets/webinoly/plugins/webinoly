#!/bin/bash

# Webinoly Server Manager Plugin
# Syntax: webinoly <option> <argument>
# Options: -update, -server-reset, -verify, -dbpass, -tools-port, -login-www-data, -config-cache, -uninstall, -info, -external-sources-update, -clear-cache, -version, -blockip, -conf-value_, -default-site, -tools-site, -mysql-password, -smtp, -backup, -aws-s3-credentials, -db-import, -send-to-s3, -header-referrer, -header-hsts, -header-csp, -skip-cache, -query-string-cache, -query-string-never-cache, -email, -external-db-save, -export, -import
# Arguments: -raw, -profile, -list, -bucket, -source, -delete, -run, -restore, -wp, -destination, -date, -s3-european-buckets, info, -file, -add-db-pre, -no-recovery, -recalculate, -dbname, -skip-db, -filename, -overwrite

source /opt/webinoly/lib/webin
source /opt/webinoly/lib/bkp
check_for_parameters $@
api-events_update wys


if [[ -n $update ]]; then
	api-events_update wy1
	webinoly_update
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $server_reset ]]; then
	api-events_update wy2
	if [[ $server_reset == true ]]; then
		server_reset="all"
	elif ! [[ $server_reset =~ ^(all|nginx|php)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option to update/reset your server configuration!${end}"
		exit 1
	fi
	server_reset
	
	
elif [[ -n $verify ]]; then
	webinoly_verify
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $dbpass ]]; then
	show_db_data
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $tools_port ]]; then
	change_tools_port


elif [[ -n $tools_site ]]; then
	check_for_nginx -ask
	set_tools_site

	
elif [[ -n $login_www_data ]]; then
	check_for_nginx -ask
	www_data_sftp_access
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $config_cache ]]; then
	config_fastcgi_cache

	
elif [[ -n $uninstall ]]; then
	api-events_update wy4
	webinoly_uninstall
	nginx_not="true" # Nginx-Reload not-needed.

	
elif [[ -n $external_sources_update ]]; then
	external_sources_update
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $clear_cache ]]; then
	api-events_update wy3
	[[ $clear_cache == true ]] && clear_cache="all"
	if ! [[ $clear_cache =~ ^(redis|memcache|memcached|opcache|fastcgi|all)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option!${end}"
		exit 1
	fi
	clear_caches
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $timezone ]]; then
	if [[ $timezone == true ]]; then
		echo "${gre}"
		echo "Please, enter a valid Timezone for Ubuntu and PHP."
		echo "http://php.net/manual/en/timezones.php"
		echo ""
		read -p "${blu} Timezone: ${end}" timezone
		echo ""
	fi
	conf_write timezone $timezone
	set_timezone
	nginx_not="true" # Nginx-Reload not-needed.
	

elif [[ -n $version || -n $v || -n $V ]]; then
	[[ -z $(conf_read server-version) ]] && sver="Not installed!" || sver=$(conf_read server-version)
	
	echo "${blu}"
	echo "Webinoly version: $app_version"
	echo "Current stack version: $sver"
	[[ $sver != $svr_version ]] && echo "Available stack version: $svr_version"
	echo "${end}"
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $blockip ]]; then
	check_for_nginx -ask
	nginx_blockip


elif [[ -n $conf_value ]]; then
	if [[ -n $dyn_var && $dyn_var =~ ^[A-Za-z\-]+$ ]]; then
		[[ $conf_value == "NeverMatchString" ]] && read -p "${blu}Enter a value for '${dyn_var}': ${end}" conf_value
		if [[ -n $conf_value ]]; then
			conf_write $dyn_var $conf_value
			echo "${gre}Configuration successfully updated!${end}"
		else
			echo "${red}[ERROR] Please, enter a valid value!${end}"
			exit 1
		fi
	else
		echo "${red}[ERROR] Please, enter a valid variable name!${end}"
		exit 1
	fi
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $default_site ]]; then
	check_for_nginx -ask
	set_default_nginx_response
	
	
elif [[ -n $mysql_password ]]; then
	if [[ $(conf_read mysql) != "true" ]]; then
		echo "${red}[ERROR] Seems like MySQL is not installed!${end}"
		exit 1
	elif [[ $(check_mysql_connection localhost) != "true" ]]; then
		exit 1
	fi
	mysql_change_password
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $smtp && -n $purge ]]; then
	if [[ $(conf_read smtp) != "true" ]]; then
		echo "${red}[ERROR] SMTP configuration not found!${end}"
		exit 1
	fi
	if [[ $(conf_read php-tool) != "true" ]]; then
		echo "${red}[ERROR] Seems like PHP and Postfix are not installed!${end}"
		exit 1
	fi
	
	sudo cat /opt/webinoly/templates/source/main.cf >| /etc/postfix/main.cf
	sudo sed -i '/mydestination =/c \mydestination = localhost' /etc/postfix/main.cf
	rm -rf /etc/postfix/sasl_passwd.db
	rm -rf /etc/postfix/sasl_passwd
	rm -rf /etc/mailname
	conf_write smtp purged
	sudo service postfix restart
	echo "${gre}SMTP configuration has been successfully removed!${end}"
elif [[ -n $smtp ]]; then
	if [[ $(conf_read php-tool) != "true" ]]; then
		echo "${red}[ERROR] Seems like PHP and Postfix are not installed!${end}"
		exit 1
	fi
	
	[[ $(conf_read smtp) == "true" ]] && echo "${gre}SMTP is already configured!${end}" || smtp_setup
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $backup ]]; then
	[[ $import =~ ^(stack|full)$ ]] || check_for_nginx_tool
	
	if [[ -n $list && -z $add_db_pre ]]; then
		bkp_s3_list
	elif [[ $backup == "local" ]]; then
		if [[ -n $export ]]; then
			if [[ $export == "true" ]]; then
				export_server
			elif [[ -f /etc/nginx/sites-available/$export ]]; then
				export_site
			else
				echo "${red}[ERROR] Please, enter a valid value for export site/server parameter!${end}"
				exit 1
			fi
		elif [[ -n $import ]]; then
			import_server
		else
			bkp_local_db
		fi
	elif [[ $backup == "s3" ]]; then
		[[ -n $send_to_s3 ]] && s3_send || bkp_s3_profile
	else
		bkp_wizard
	fi
	
	[[ -z $import ]] && nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $aws_s3_credentials ]]; then
	aws_s3_credentials
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $datadog ]]; then
	if [[ -n $purge ]]; then
		if [[ $integrations == "nginx" ]]; then
			dd_nginx_purge
		elif [[ $integrations == "fpm" ]]; then
			dd_fpm_purge
		elif [[ $integrations == "mysql" ]]; then
			dd_mysql_purge
		elif [[ $integrations == "redis" ]]; then
			dd_redis_purge
		elif [[ -n $integrations ]]; then
			echo "${red}[ERROR] Invalid Datadog integration!${end}"
			exit 1
		else
			dd_purge
		fi
		
		
		if [[ -n $integrations ]]; then
			dd_logs_disable
			sudo service datadog-agent restart
		fi
		
	elif [[ -n $integrations && $integrations != "off" ]]; then
		if [[ ! -d /etc/datadog-agent ]]; then
			echo "${red}[ERROR] Datadog Agent is not installed in your server!${end}"
			exit 1
		fi
		
		if [[ $integrations == "nginx" ]]; then
			check_for_nginx
			dd_nginx
		elif [[ $integrations == "fpm" ]]; then
			check_for_php
			dd_fpm
		elif [[ $integrations == "mysql" ]]; then
			check_for_mysql
			dd_mysql
		elif [[ $integrations == "redis" ]]; then
			check_for_php_tool
			dd_redis
		else
			echo "${red}[ERROR] Invalid Datadog integration!${end}"
			exit 1
		fi
		
		sudo service datadog-agent restart
	else
		dd_install
	fi


elif [[ -n $db_import ]]; then
	database_import
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $info ]]; then
	system_info
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $header_referrer ]]; then
	http_header_referrer
elif [[ -n $header_hsts ]]; then
	http_header_hsts
elif [[ -n $header_csp ]]; then
	http_header_csp


elif [[ -n $query_string_cache || -n $query_string_never_cache || -n $skip_cache ]]; then
	check_for_nginx
	custom_cache_global


elif [[ -n $email ]]; then
	email_update
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $external_db_save ]]; then
	ext_db_save
	nginx_not="true" # Nginx-Reload not-needed.
	

else
	echo "${red}[ERROR] Please enter a valid option!${end}"
	exit 1
fi

[[ -n $err_cont ]] && exit 1
[[ $(conf_read nginx) == "true" && -z $nginx_not ]] && sudo service nginx reload
api-events_update wye
