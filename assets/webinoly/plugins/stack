#!/bin/bash

# Server Stack Manager
# Syntax: stack <option> <arguments>
# Options: -html, -nginx, -php, -lemp, -mysql, -pma, -info, -purge-server-all, -php-ver
# Arguments: -purge, -notools

source /opt/webinoly/lib/install
check_for_parameters $@
api-events_update sts

# FORCE - Unattended Purge
clear_force_flag() {
	[[ $(conf_read force-flag) == "true" ]] && conf_delete force-flag
}
if [[ $purge == "force" || $purge_server_all == "force" || $php == "force" ]]; then
	conf_write force-flag true
	force="1"
fi

purge_mysql_client() {
	local mysqlver=$(sudo mysql -V | cut -f 6 -d " " -s | cut -f -2 -d "." -s)
	sudo apt -y purge mariadb-client
	sudo add-apt-repository --remove "http://mirrors.syringanetworks.net/mariadb/repo/${mysqlver}/ubuntu"
	sudo apt-key del 0xF1656F24C74CD1D8
	conf_write mysql-client purged
}


# Delete/Purge some stack
if [[ -n $purge && ( -n $html || -n $nginx ) ]]; then
	api-events_update pn1
	if [[ $(conf_read nginx) != "true" ]]; then
		echo "${dim}Nginx is not installed, hence can not be deleted! ${end}"
		clear_force_flag
	else
		echo ""
		echo "${red}ยก C A U T I O N !  You are about to remove NGINX from your server!"
		[[ $(conf_read mysql-tool) == "true" ]] && echo "phpMyAdmin will be removed too because depends on Nginx."
		echo ""
		
		if [[ $(conf_read force-flag) != "true" ]]; then
			echo " ${blu}Are you sure [y/N]? ${end}"
			while read -r -n 1 -s answer; do
			  answer=${answer:-n}
			  [[ $answer = [YyNn] ]] && break
			done
		fi
		
		if [[ $answer == [Yy] || $(conf_read force-flag) == "true" ]]; then
			if [[ $(conf_read force-flag) == "true" && $force == 1 ]]; then
				answer="Y"
			else
				echo ""
				echo "${blu}Do you want to delete your sites data directory (/var/www) [Y/n]? ${end}"
				while read -r -n 1 -s answer; do
				  answer=${answer:-y}
				  [[ $answer = [YyNn] ]] && break
				done
			fi
			if [[ $answer == [Yy] ]]; then
				[[ $(conf_read mysql-tool) == "true" ]] && stack -pma -purge=force
				api-events_update pn2
				site -delete-all=force
				sudo rm -rf /var/www/$(conf_read tools-port)
				sudo rm -rf /var/www/html
				api-events_update pn3
			fi
			
			sudo service nginx stop
			sudo apt -y purge nginx nginx-common # Common package is no longer installed, but we purge it in case of old stacks built before 1.14.0.
			
			[[ $(conf_read nginx-ppa) == "mainline" ]] && sudo add-apt-repository --remove "deb https://nginx.org/packages/mainline/ubuntu/ focal nginx" || sudo add-apt-repository --remove "deb https://nginx.org/packages/ubuntu/ focal nginx"
			sudo apt-key del 7BD9BF62
			
			api-events_update pn4
			api-events_update pn5
			
			sudo snap remove certbot
			[[ $(check_osname) == "bionic" ]] && sudo apt -y purge python-boto duplicity duply || sudo apt -y purge python3-boto3 duplicity duply
			[[ -L /usr/bin/certbot ]] && sudo rm -rf /usr/bin/certbot
			
			# Remove SSL Cron
			if [[ -f /var/spool/cron/crontabs/root ]]; then
				sudo sed -i '/MAILTO=/d' /var/spool/cron/crontabs/root
				sudo sed -i '/certbot renew/d' /var/spool/cron/crontabs/root
			fi
			sudo apt -y autoremove
			
			current_home=$(eval echo ~${SUDO_USER:-${USER}})
			[ -L $current_home/www ] && sudo rm $current_home/www
			[ -L $current_home/sites-available ] && sudo rm $current_home/sites-available
			
			# Remove sources
			sudo rm -rf /opt/webinoly/templates/source/default
			
			api-events_update pn6
			linux_purge
			
			conf_write nginx purged
			conf_write nginx-optim purged
			conf_write nginx-tool purged
			conf_delete server-version
			echo ""
			echo "${gre}Nginx has been deleted successfully! ${end}"
			echo ""
		else
			echo ""
			echo " ${gre}Action aborted!!!  ${end}"
			echo ""
		fi
		echo ""
	fi
	
elif [[ -n $purge && -n $php ]]; then
	api-events_update pp1
	if [[ $(conf_read php) != "true" ]]; then
		echo "${dim}PHP is not installed, hence can not be deleted! ${end}"
		clear_force_flag
	else
		echo ""
		echo "${red}ยก C A U T I O N !  You are about to remove PHP from your server!"
		echo "This action will also remove phpMyAdmin if its installed because depends on PHP. ${end}"
		echo ""

		if [[ $(conf_read force-flag) != "true" ]]; then
			echo " ${blu}Are you sure [y/N]? ${end}"
			while read -r -n 1 -s answer; do
				answer=${answer:-n}
				[[ $answer = [YyNn] ]] && break
			done
		fi

		if [[ $answer == [Yy] || $(conf_read force-flag) == "true" ]]; then
			[[ $(conf_read mysql-tool) == "true" ]] && stack -pma -purge=force
			sudo service php*-fpm stop
			ver=$(conf_read php-ver)
			
			sudo apt -y purge php${ver}-common php${ver}-cli php${ver}-fpm php${ver}-curl php${ver}-gd php${ver}-imap php${ver}-readline php${ver}-mysql php${ver}-mbstring php${ver}-bcmath php${ver}-mysql php${ver}-opcache php${ver}-zip php${ver}-xml php${ver}-soap php${ver}-imagick php${ver}-msgpack php${ver}-igbinary graphviz php-pear ghostscript
			
			sudo apt -y purge php${ver}-memcached php${ver}-memcache memcached
			sudo apt -y purge redis-server php${ver}-redis postfix
			
			# For old packages - before ondrej split modules
			sudo apt -y purge php-memcached php-memcache php-imagick php-msgpack php-redis
			
			echo | sudo add-apt-repository --remove 'ppa:ondrej/php'
			echo | sudo add-apt-repository --remove 'ppa:chris-lea/redis-server'
			sudo apt -y autoremove
			sudo rm -rf /etc/php
			sudo rm /opt/webinoly/templates/source/*
			sudo apt-key del E5267A6C #ondrej
			sudo apt-key del C7917B12 #chrislea

			# Remove sources
			sudo rm -rf /opt/webinoly/templates/source/php.ini
			sudo rm -rf /opt/webinoly/templates/source/www.conf
			sudo rm -rf /opt/webinoly/templates/source/main.cf
			
			# Remove tools-site
			sudo rm -rf /etc/nginx/sites-available/$(conf_read tools-port)
			sudo rm -rf /etc/nginx/sites-enabled/$(conf_read tools-port)
			sudo rm -rf /var/www/$(conf_read tools-port)
			conf_delete tools-site
			
			conf_write php purged
			conf_write php-optim purged
			[[ $(conf_read php-v8.0) == "true" ]] && conf_write php-v8.0 purged
			[[ $(conf_read php-v7.4) == "true" ]] && conf_write php-v7.4 purged
			[[ $(conf_read php-v7.3) == "true" ]] && conf_write php-v7.3 purged
			[[ $(conf_read php-v7.2) == "true" ]] && conf_write php-v7.2 purged
			# We need it to support and update old deprecated stacks.
			[[ $(conf_read php-v7.1) == "true" ]] && conf_write php-v7.1 purged
			[[ $(conf_read php-v7.0) == "true" ]] && conf_write php-v7.0 purged
			[[ $(conf_read php-v5.6) == "true" ]] && conf_write php-v5.6 purged

			if [[ $(conf_read php-tool) == "true" ]]; then
				rm -rf /var/www/$(conf_read tools-port)/htdocs/fpm
				rm -rf /var/www/$(conf_read tools-port)/htdocs/php
				conf_write php-tool purged
			fi

			echo ""
			echo "${gre}PHP has been deleted successfully! ${end}"
			echo ""
		else
			echo ""
			echo " ${gre}Action aborted!!!  ${end}"
			echo ""
		fi
		echo ""
		api-events_update pp2
	fi
	
	
elif [[ -n $purge && -n $mysql ]]; then
	api-events_update pm1
	if [[ $(conf_read mysql) != "true" && $(conf_read mysql-client) == "true" ]]; then
		purge_mysql_client
		echo "${dim}MySQL is not installed, hence can not be deleted! ${end}"
		echo "${gre}MySQL-Client has been deleted successfully! ${end}"
	elif [[ $(conf_read mysql) != "true" ]]; then
		echo "${dim}MySQL is not installed, hence can not be deleted! ${end}"
	else
		echo ""
		echo "${red}ยก C A U T I O N !  You are about to remove MySQL from your server! ${end}"
		echo ""

		if [[ $(conf_read force-flag) != "true" ]]; then
			echo " ${blu}Are you sure [y/N]? ${end}"
			while read -r -n 1 -s answer; do
			  answer=${answer:-n}
			  [[ $answer = [YyNn] ]] && break
			done
		fi
		
		if [[ $answer == [Yy] || $(conf_read force-flag) == "true" ]]; then
			if [[ $(conf_read mysql-tool) == "true" ]]; then
				conf_write delautopma true
				stack -pma -purge
				conf_delete delautopma
			fi
			
			# Determine MySQL version according to stack version.
			mysqlver=$(sudo mysql -V | cut -f 6 -d " " -s | cut -f -2 -d "." -s)
			sudo service mysql stop
			
			if [[ $mysql == "keep-data" ]]; then
				echo "mariadb-server-${mysqlver}	mariadb-server-${mysqlver}/postrm_remove_databases	boolean false" | debconf-set-selections
			else
				echo "mariadb-server-${mysqlver}	mariadb-server-${mysqlver}/postrm_remove_databases	boolean true" | debconf-set-selections
			fi
			
			sudo apt -y purge mariadb-server mariadb-common mysql-common
			sudo apt -y purge debconf-utils
			purge_mysql_client
			sudo add-apt-repository --remove "http://mirrors.syringanetworks.net/mariadb/repo/${mysqlver}/ubuntu"
			sudo apt -y autoremove
			
			if [[ $mysql != "keep-data" ]]; then
				sudo rm -rf /etc/mysql
				sudo rm -rf /var/lib/mysql
				conf_delete mysql-root
				conf_delete mysql-admin
			else
				echo "${blu}MySQL data was not removed.${end}"
			fi
			
			conf_write mysql purged
			echo ""
			echo "${gre}MySQL has been deleted successfully! ${end}"
			echo ""
		else
			echo ""
			echo " ${gre}Action aborted!!!  ${end}"
			echo ""
		fi
		echo ""
		api-events_update pm4
	fi
	
	
elif [[ -n $purge && -n $pma ]]; then
	api-events_update pm2
	if [[ $(conf_read mysql-tool) != "true" ]]; then
		echo "${dim}phpMyAdmin is not installed, hence can not be deleted! ${end}"
		clear_force_flag
	else
		echo ""
		echo "${red}ยก C A U T I O N !  You are about to remove phpMyAdmin from your server! ${end}"
		echo ""

		if [[ $(conf_read force-flag) != "true" && $(conf_read delautopma) != "true" ]]; then
			echo " ${blu}Are you sure [y/N]? ${end} "
			while read -r -n 1 -s answer; do
			  answer=${answer:-n}
			  if [[ $answer = [YyNn] ]]; then
				break
			  fi
			done
		fi

		if [[ $answer == [Yy] || $(conf_read force-flag) == "true" || $(conf_read delautopma) == "true" ]]; then
			sudo rm -rf /var/www/$(conf_read tools-port)/htdocs/pma
			conf_write mysql-tool purged
			echo ""
			echo "${gre}phpMyAdmin has been deleted successfully! ${end}"
			echo ""
		else
			echo ""
			echo " ${gre}Action aborted!!!  ${end}"
			echo ""
		fi
		echo ""
		api-events_update pm3
	fi
	
	
elif [[ -n $purge && -n $lemp ]]; then
	echo "${red}If you want to remove Webinoly Stack completely from your server use the '-purge-server-all' option or remove each package individually.  ${end}"
	exit 1



# Install some stack
elif [[ -n $html || -n $nginx ]]; then
	if [[ $(conf_read nginx) != "true" ]]; then
		nginx_install
		nginx_optim
		[[ -z $notools ]] && nginx_tool
		
		echo ""
		echo "${gre}Nginx has been successfully Optimized by Webinoly! ${end}"
		echo ""
	else
		echo "${dim}Nginx is already installed!${end}"
		if [[ $(conf_read nginx-optim) != "true" ]]; then
			nginx_optim
			echo "${gre}"
			echo "NGINX has been successfully Optimized by Webinoly!"
			echo "${end}"
		fi
		if [[ $(conf_read nginx-tool) != "true" && -z $notools ]]; then
			nginx_tool
			echo "${gre}"
			echo "NGINX Tools has been re-installed!"
			echo "${end}"
		fi
	fi
	
	
elif [[ -n $php ]]; then
	# Check for a valid custom value.
	if [[ -n $php && $php != true && $(conf_read multi-php) != "true" && $php != "force" ]]; then
		echo "${red}[ERROR] Please, enter a valid PHP custom value!${end}"
		exit 1
	fi
	
	if [[ $(conf_read php) != "true" || ( $(conf_read multi-php) == "true" && $php != true && $(conf_read php-v${php}) != "true" ) ]]; then
		if [[ $(conf_read nginx) != "true" && $(conf_read force-flag) != "true" && $(conf_read multi-php) != "true" ]]; then
			echo ""
			echo "${blu}Nginx is not installed, do you want to install it too [Y/n]?${end} "
			while read -r -n 1 -s answer; do
			  answer=${answer:-y}
			  [[ $answer = [YyNn] ]] && break
			done
			[[ $answer != [Nn] ]] && stack -nginx $2
		fi
		
		[[ $php != true && $(conf_read multi-php) == "true" ]] && php_install $php || php_install
		[[ $php != true && $(conf_read php-v${php}) == "true" ]] && php_optim $php || php_optim
		[[ -z $notools && $(conf_read php-tool) != "true" ]] && php_tool
		echo ""
		echo "${gre}PHP has been successfully Optimized by Webinoly! ${end}"
		echo ""
	else
		echo "${dim}PHP is already installed!${end}"
		if [[ $(conf_read php-optim) != "true" ]]; then
			php_optim
			echo "${gre}"
			echo "PHP has been successfully Optimized by Webinoly!"
			echo "${end}"
		fi
		if [[ $(conf_read php-tool) != "true" && -z $notools ]]; then
			php_tool
			echo "${gre}"
			echo "PHP Tools has been re-installed!"
			echo "${end}"
		fi
	fi
	
elif [[ -n $mysql ]]; then
	if [[ $(conf_read mysql) != "true" ]]; then
		mysql_install
		[[ -z $notools && $(conf_read mysql) == "true" && $(conf_read php) == "true" && $(conf_read nginx) == "true" && $(conf_read nginx-tool) == "true" ]] && stack -pma || echo "${gre}phpMyAdmin was NOT installed!${end}"
		messagend_install
	else
		echo "${dim}MySQL is already installed!${end}"
		if [[ $(conf_read mysql-tool) != "true" && -z $notools ]]; then
			stack -pma
			[[ $(conf_read mysql-tool) == "true" ]] && echo "${gre}MySQL Tools has been re-installed!${end}"
		fi
	fi

elif [[ -n $pma ]]; then
	if [[ $(conf_read mysql) != "true" || $(conf_read php) != "true" || $(conf_read nginx) != "true" || $(conf_read nginx-tool) != "true" ]]; then
		echo "${red}[ERROR] You need to have MySQL, PHP and NGINX installed before you can install phpMyAdmin! ${end}"
		clear_force_flag
		exit 1
	fi
	[[ $(conf_read mysql-tool) != "true" ]] && mysql_tool || echo "${dim}phpMyAdmin is already installed!${end}"

elif [[ -n $lemp ]]; then
	api-events_update st1
	[[ $lemp =~ ^(stable|mainline)$ ]] && stack -nginx=$lemp $2 || stack -nginx $2
	stack -php $2
	stack -mysql $2
	echo ""
	echo "${gre}Nginx, PHP, MySQL (MariaDB) and some other useful tools have been installed successfully! ${end}"
	echo ""
	
elif [[ -n $php_ver ]]; then
	api-events_update st3
	if [[ $(conf_read multi-php) == "true" ]]; then
		echo "${red}[ERROR] This command is disabled because Multi-PHP is enabled!${end}"
		exit 1
	fi
	
	if [[ $php_ver != true && $(check_php_version $php_ver) == "true" ]]; then
		echo "${blu}New PHP version: '$php_ver' ${end}"
		if [[ $(conf_read php) == "true" && $(conf_read php-ver) == $php_ver ]]; then
			echo "${gre}PHP $php_ver is currently installed!${end}"
		elif [[ $(conf_read php) == "true" && $(conf_read mysql-tool) == "true" ]]; then
			sudo stack -php -purge=force
			conf_write php-ver $php_ver
			# force flag prevent to be questioned (Unattended) when nginx is not installed.
			conf_write force-flag true
			sudo stack -php
			sudo stack -pma
		elif [[ $(conf_read php) == "true" && $(conf_read mysql-tool) != "true" ]]; then
			sudo stack -php -purge=force
			conf_write php-ver $php_ver
			conf_write force-flag true
			sudo stack -php
		elif [[ $(conf_read php) != "true" && $(conf_read mysql-tool) != "true" ]]; then
			conf_write php-ver $php_ver
			echo "${gre}PHP is not already installed but new version will be installed next time! ${end}"
		fi
		clear_force_flag
	else
		echo "${red}[ERROR] Please, enter a valid PHP version!${end}"
		exit 1
	fi

	
# Purge-Server-All
elif [[ -n $purge_server_all ]]; then
	api-events_update st2
	echo ""
	echo "${red}ยก C A U T I O N !  You are about to remove Webinoly Stack completely from your server!"
	echo "This action will remove Nginx, PHP, MySQL and all the additional tools."
	echo "${end}"
	if [[ $(conf_read force-flag) != "true" && $force != 1 ]]; then
		echo " ${blu}Are you sure [y/N]? ${end}"
		while read -r -n 1 -s answer; do
		  answer=${answer:-n}
		  [[ $answer = [YyNn] ]] && break
		done
	else
		answer="Y"
	fi

	if [[ $answer == [Yy] ]]; then
		conf_write force-flag true
		stack -nginx -purge=force
		stack -mysql -purge=force
		stack -php -purge=force
		clear_force_flag
		
		# Remove remanent packages and things!
		[[ -d /etc/datadog-agent ]] && webinoly -datadog -purge
		[[ -f /etc/ssl/certs/webinoly-blackhole.crt.pem ]] && sudo rm -rf /etc/ssl/certs/webinoly-blackhole.crt.pem
		[[ -f /etc/ssl/private/webinoly-blackhole.key.pem ]] && sudo rm -rf /etc/ssl/private/webinoly-blackhole.key.pem
		[[ -f /etc/ssl/dhparam.pem ]] && sudo rm -rf /etc/ssl/dhparam.pem
		if [[ $(conf_read pre-packs) == true ]]; then
			sudo apt-get -y -qq purge pwgen unzip zip > /dev/null
			sudo apt-get -y -qq autoremove > /dev/null
			conf_write pre-packs purged
		fi	
		
		echo "${gre}"
		echo "****************************************************************************"
		echo "***     Webinoly Stack have been completely removed from your server     ***"
		echo "****         We are sad because you decided to remove Webinoly!!        ****"
		echo "****************************************************************************"
		echo "${end}"
	else
		echo ""
		echo " ${gre} Action aborted!!!  ${end}"
		echo ""
	fi
else
	echo "${red}[ERROR] Please, enter a valid option! ${end}"
	exit 1
fi


# Clear FORCE flag in config file
if [[ $force == 1 ]]; then
	clear_force_flag
	force="0"
fi
api-events_update ste
