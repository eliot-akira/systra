#!/bin/bash


bucket_validation() {
	local bucketname=$(echo $1 | cut -d "/" -f 1)
	local bucketfolder=$(echo $1 | cut -d "/" -f 2- -s)
	
	# Only numerals 0-9, basic Latin letters (only lowercase) and underscore.
	# https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html
	if [[ -z $1 || -z $bucketname ]]; then
		echo "${red}[ERROR] Please, enter a valid bucket name! ${end}"
		exit 1
	elif ! [[ $bucketname =~ ^[0-9a-z\/-]+$ ]] || [[ -z $bucketname || $(echo $bucketname | cut -c-1) =~ [-|\/] || ${#bucketname} -gt 63 || ${#bucketname} -lt 3 ]]; then
		echo "${red}[ERROR] Bucket names can only contain lowercase letters, numbers or hyphens; must start with a letter or number and must be at least 3 and no more than 63 characters long.${end}"
		exit 1
	elif [[ -n $bucketfolder ]] && ! [[ $bucketfolder =~ ^[0-9a-zA-Z\/-_\!\.\*\'\)\(]+$ ]]; then
		if [[ $(is_url_path /$bucketfolder) == "true" ]]; then
			echo "${red}[WARNING] Your bucket folder name contain some characters that might require special handling!"
			echo "More info: https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-key-guidelines ${end}"
		else
			echo "${red}[ERROR] Invalid bucket folder name.${end}"
			exit 1
		fi
	fi
}


bkp_local_db() {
	check_for_mysql_client
	
	if [[ ( -z $wp || $wp == "true") && ( -z $dbname || $dbname == "true" ) ]]; then
		read -p "${gre}WordPress site (domain) or Database name: ${end}" dbq
		if [[ -n $dbq && -f /etc/nginx/sites-available/$dbq ]]; then
			wp=$dbq
		elif [[ -n $dbq ]]; then
			dbname=$dbq
			wp=""
		else
			echo "${red}[ERROR] Invalid value!${end}"
			exit 1
		fi
	fi
	
	if [[ -n $wp ]]; then
		if [[ ! -f /etc/nginx/sites-available/$wp ]]; then
			echo "${red}[ERROR] Site not found!${end}"
			exit 1
		elif [[ $(is_wp $wp $subfolder) != "true"  ]]; then
			echo "${red}[ERROR] Please, enter a valid WP site!${end}"
			exit 1
		else
			wp_conf_retrieve $wp $subfolder
		fi
		
		if [[ $wp_dbhost != "localhost" && ( -z $extdb_user || -z $extdb_pass || -z $extdb_url || -z $extdb_port ) ]]; then
			echo "${red}[ERROR] Invalid data for External Database!${end}"
			exit 1
		
		# Duplicate check: we need this only to prevent error in the next is_wp_installed
		elif [[ $wp_dbhost != "localhost" && $(check_mysql_connection $extdb_url $extdb_port $extdb_user $extdb_pass) != "true" ]]; then
			echo "${red}[ERROR] External DB Connection failed!${end}"
			exit 1
		elif [[ $wp_dbhost == "localhost" && $(check_mysql_connection localhost) != "true" ]]; then
			echo "${red}[ERROR] Localhost DB Connection failed!${end}"
			exit 1
			
		elif [[ $(is_wp_installed $wp $subfolder) != "true"  ]]; then
			echo "${red}[ERROR] Your WP site database is still empty!${end}"
			exit 1
		else
			local dbname=$wp_dbname
			local extdb_url=$extdb_url
			local extdb_port=$extdb_port
			local extdb_user=$extdb_user
			local extdb_pass=$extdb_pass
		fi
	else
		check_external_db_saved
		
		if [[ -z $external_db ]]; then
			if [[ $(check_mysql_connection localhost) != "true" ]]; then
				echo "${red}[ERROR] Cannot connect with your database (localhost)!${end}"
				exit 1
			fi
			local checkdbname=$(sudo mysqlshow --user=admin -p$ADMIN_PASS | grep -ow $dbname)
		else
			external_db_parse
			local checkdbname=$(sudo mysqlshow -h "$extdb_url" -P "$extdb_port" -u"$extdb_user" -p"$extdb_pass" | grep -ow $dbname)
		fi
		
		if [[ $checkdbname != $dbname  ]]; then
			echo "${red}[ERROR] Database not found!${end}"
			exit 1
		fi
		
	fi
	
	[[ -n $wp ]] && local fn=$wp || local fn=$dbname
	
	if [[ -z $destination || $destination =~ ^(default|true)$ ]]; then
		destination="$HOME/webinoly-backups/$fn"
		sudo mkdir -p $destination
	
	# Must start with / and can not end with /
	elif [[ ! -d $destination && $(echo "${destination}" | cut -c-1) == "/" && $(echo "${destination}" | rev | cut -c-1) != "/" ]]; then
		sudo mkdir -p $destination
	fi
	if [[ ! -d $destination || $(echo "${destination}" | rev | cut -c-1) == "/" ]]; then
		echo "${red}[ERROR] Please, enter a valid destination path!${end}"
		exit 1
	fi
	
	echo "${blu}${dim}Backup is in process, wait...${end}"
	[[ -z $filename ]] && local filename="webinoly-backup-db_${fn}_$(date +%F)-$(date +%T).sql"
	if [[ ( $wp_dbhost == "localhost" || -z $external_db ) && $(check_mysql_connection localhost) == "true" ]]; then
		sudo mysqldump --user=admin --password=$ADMIN_PASS --single-transaction --lock-tables --quick --databases $dbname > $destination/$filename
	elif [[ $(check_mysql_connection $extdb_url $extdb_port $extdb_user $extdb_pass) == "true" ]]; then
		sudo mysqldump -h "$extdb_url" -P "$extdb_port" -u"$extdb_user" -p"$extdb_pass" --single-transaction --lock-tables --quick --databases $dbname > $destination/$filename
	else
		echo "${red}[ERROR] DB Connection failed!${end}"
		exit 1
	fi
	
	if [[ -s $destination/$filename ]]; then
		echo "${gre}Database local backup successfully done!${end}${dim} ($destination/$filename)${end}"
		[[ -n $bucket ]] && sudo webinoly -backup=s3 -send-to-s3=$destination/$filename -bucket=$bucket
		[[ -n $max && $max =~ ^[0-9]+$ ]] && sudo ls -1t $destination | tail -n +$((max+1)) | xargs -d '\n' -I '%' sudo rm -f $destination/%
	else
		echo "${red}[ERROR] Database backup failed!${end}"
		exit 1
	fi
}


check_duply_profile() {
	if [[ ! -d $HOME/.duply/$profile ]]; then
		echo "${red}[ERROR] Backup profile not found!${end}"
		exit 1
	fi
}


bkp_s3_profile() {
	if [[ ! -s $HOME/.aws/credentials && $(conf_read awsiamrole) != true ]]; then
		echo "${red}[ERROR] AWS S3 Credentials not found!${end}"
		exit 1
	fi
	
	if [[ $profile == "true" || -z $profile ]]; then
		echo ""
		read -p "${gre}Profile name: ${end}" profile
		
		if [[ -z $profile ]]; then
			echo "${red}[ERROR] Profile name is empty!${end}"
			exit 1
		fi
	fi
	
	
	if [[ -n $run ]]; then
		check_duply_profile
		sudo duply $profile backup_verify_purge --force --allow-source-mismatch
		
	elif [[ -n $info ]]; then
		check_duply_profile
		
		tar=$(grep -E "^TARGET[ ]?=" $HOME/.duply/$profile/conf | cut -f 2 -d "'" )
		sou=$(grep -E "^SOURCE[ ]?=" $HOME/.duply/$profile/conf | cut -f 2 -d "'" )
		age=$(grep -E "^MAX_AGE[ ]?=" $HOME/.duply/$profile/conf | cut -f 2 -d "=" )
		par=$(grep "s3-use-new-style" $HOME/.duply/$profile/conf | cut -f 2 -d '"' )
			
		echo ""
		echo "${blu}S3 Bucket:${end} $tar"
		echo "${blu}Source:${end} $sou"
		echo "${blu}Max_Age:${end} $age"
		echo "${blu}Parameters:${end} $par"
		echo ""
	
	elif [[ -n $delete ]]; then
		check_duply_profile
		
		sudo rm -rf $HOME/.duply/$profile
		echo "${gre}Backup profile ${blu}'$profile'${gre} was successfully deleted!${end}"
		
	elif [[ -n $restore ]]; then
		check_duply_profile
		
		# Temporary check!!!! Should be removed soon!!!
		if [[ $restore != "true" && -z $destination ]]; then
			echo "${red}[ERROR] Backup Restore syntax has changed, destination paramater is needed!${end}"
			exit 1
		fi
		
		if [[ -z $destination || $destination == "true" ]]; then
			echo ""
			# We don't do a destination path validation because duply can handle it better.
			read -p "${gre}Restore destination folder: ${end}" destination
			
			if [[ -z $destination ]]; then
				echo "${red}[ERROR] Invalid destination path!${end}"
				exit 1
			fi
		fi
		
		[[ $restore != "true" ]] && sudo duply $profile fetch $restore $destination $date || sudo duply $profile restore $destination $date
		
		
	elif [[ -n $add_db_pre && -n $list ]]; then
		check_duply_profile
		
		if [[ -s $HOME/.duply/$profile/pre ]]; then
			if [[ -z $raw ]]; then
				echo ""
				echo "${gre}The following lines will be executed every time just before (PRE)${blu} '$profile' ${gre}backup is run:${blu}"
			fi
			cat $HOME/.duply/$profile/pre
			[[ -z $raw ]] && echo "${end}"
		else
			[[ -z $raw ]] && echo "${red}[ERROR] PRE Database backups is empty!${end}"
			exit 1
		fi
	
	
	elif [[ -n $add_db_pre && -n $purge ]]; then
		check_duply_profile	
		sudo rm -rf $HOME/.duply/$profile/pre
		echo "${gre}PRE Database backups for${blu} '$profile' ${gre}has been successfully removed!${end}"
		
		
	elif [[ -n $add_db_pre ]]; then
		check_duply_profile
		
		[[ $add_db_pre == "true" ]] &&	read -p "${gre}WordPress site: ${end}" add_db_pre
		# we dont check is_wp_installed because at this point we are still not doing a backup, just setting it.
		if [[ -z $add_db_pre || $(is_wp $add_db_pre $subfolder) != "true"  ]]; then
			echo "${red}[ERROR] Please, enter a valid WP site!${end}"
			exit 1
		fi
		
		[[ -z $subfolder ]] && local sbf="false" || sbf=$subfolder
		wp_conf_retrieve $add_db_pre $sbf false
		if [[ $wp_dbhost != "localhost" && -z $(conf_read external-dbu) && -z $(conf_read external-dbp) ]]; then
			echo "${red}[ERROR] Database host is not localhost!${dim} (External databases are supported with -external-db-save)${end}"
			exit 1
		fi
		
		[[ -z $destination || $destination == "true" ]] && destination="default"
		[[ -z $max && $destination == "default" ]] && max="5"
		[[ -n $max && $max =~ ^[0-9]+$ ]] && local param="-max=$max "
		[[ -n $bucket && $bucket != "true" ]] && local param="${param}-bucket=$bucket "
		[[ -n $subfolder ]] && local param="${param}-subfolder=$subfolder"
		
		[[ ! -f $HOME/.duply/$profile/pre ]] && sudo touch $HOME/.duply/$profile/pre
		echo "sudo webinoly -backup=local -wp=$add_db_pre -destination=$destination $param" >> $HOME/.duply/$profile/pre
		echo "${gre}Database backup will run each time you run your S3 backup!${end}"
	
	else
		if [[ -d $HOME/.duply/$profile ]]; then
			echo "${red}[ERROR] Can not create profile${blu} '$profile' ${red}because already exists!${end}"
			exit 1
		fi
	
		[[ -z $bucket || $bucket == "true" ]] &&	read -p "${gre}S3 Bucket name: ${end}" bucket
		bucket_validation $bucket
		
		[[ -z $source || $source == "true" ]] && read -p "${gre}Source path: ${end}" source
		if [[ -z $source || ! -d $source ]]; then
			echo "${red}[ERROR] Please, enter a valid source folder and bucket name!${end}"
			exit 1
		fi
		
		sudo duply $profile create
		[[ -z $max_age ]] && max_age="1M"
		sudo sed -i -E "/^[#]?GPG_KEY=/c GPG_KEY='disabled'" $HOME/.duply/$profile/conf
		sudo sed -i -E "/^[#]?GPG_PW=/c #GPG_PW='_GPG_PASSWORD_'" $HOME/.duply/$profile/conf
		sudo sed -i -E "/^[#]?SOURCE=/c SOURCE='$source'" $HOME/.duply/$profile/conf
		sudo sed -i -E "/^[#]?MAX_AGE=/c MAX_AGE=$max_age" $HOME/.duply/$profile/conf
		sudo sed -i '/^#MAX_FULLBKP_AGE=/s/#//' $HOME/.duply/$profile/conf
		sudo sed -i '/^#DUPL_PARAMS="\$DUPL_PARAMS --full-if-older-than \$MAX_FULLBKP_AGE "/s/#//' $HOME/.duply/$profile/conf
		
		if [[ $(check_osname) == "focal" ]]; then
			sudo sed -i -E "/^[#]?TARGET=/c TARGET='boto3+s3://${bucket}'" $HOME/.duply/$profile/conf
		else
			sudo sed -i -E "/^[#]?TARGET=/c TARGET='s3+http://${bucket}'" $HOME/.duply/$profile/conf
			sudo echo 'DUPL_PARAMS="$DUPL_PARAMS --s3-use-new-style "' >> $HOME/.duply/$profile/conf
		fi
		
		echo "${gre}Backup profile ${blu}'$profile'${gre} was successfully created!${end}"
	fi
}


bkp_s3_list() {
	echo ""
	if [[ -d $HOME/.duply ]];  then
		for f in $HOME/.duply/*
		do 
			[[ -d $f ]] && pro=$(echo $f | rev | cut -f 1 -d "/" -s | rev)
			[[ -f $f/conf ]] && fail="" || fail="${red}(fail)${end}"
			[[ -n $raw || $list == "raw" ]] && outlist="$pro" || outlist=" ${gre}+ $pro ${end}${fail}"
			if [[ -n $pro ]]; then
				echo "$outlist"
				nonemptylist=true
			fi
		done
	fi
	
	[[ -z $nonemptylist && -z $raw && $list != "raw" ]] && echo "${blu}[Empty] No profiles were found!${end}"
	echo ""
}


s3_send() {
	if [[ ! -s $HOME/.aws/credentials && $(conf_read awsiamrole) != true ]]; then
		echo "${red}[ERROR] AWS S3 Credentials not found!${end}"
		exit 1
	fi
	
	[[ -z $send_to_s3 || $send_to_s3 == "true" ]] && read -p "${gre}File to send: ${end}" send_to_s3
	if [[ ! -f $send_to_s3 ]]; then
		echo "${red}[ERROR] File not found!${end}"
		exit 1
	fi
	
	[[ -z $bucket || $bucket == "true" ]] &&	read -p "${gre}S3 Bucket name: ${end}" bucket
	bucket_validation $bucket
	
	folder=$(echo $bucket | cut -f 2- -d "/" -s)
	[[ -n $folder ]] && keyfol="${folder}/"
	[[ -n $folder ]] && folder="/${folder}/"
	
	export keyfol
	export folder
	export bucket=$(echo $bucket | cut -f 1 -d "/")
	export send_to_s3

	if [[ $(check_osname) == "focal" ]]; then
		python3 - &>/dev/null <<END
import os,boto3

filepath = os.environ['send_to_s3']
BUCKET = os.environ['bucket']
folder = os.environ['keyfol']

s3_client = boto3.client('s3')
s3_client.upload_file(filepath, BUCKET, folder + filepath.split('/')[-1])

END
	else
		python - &>/dev/null <<END
import os,boto

filepath = os.environ['send_to_s3']
BUCKET = os.environ['bucket']
folder = os.environ['folder']

conn = boto.connect_s3()
bucket = conn.lookup(BUCKET)
k = bucket.new_key(folder + filepath.split('/')[-1])
k.set_contents_from_filename(filepath)

END
	fi
	
	if [[ $? == 0 ]]; then
		unset send_to_s3
		unset folder
		unset bucket
		echo "${gre}File was sent to S3 successfully!${end}"
	else
		unset send_to_s3
		unset folder
		unset bucket
		echo "${red}[ERROR] Can not connect with your bucket!${end}"
		exit 1
	fi
	
}


conf_read_exported() {
	local val=$(grep -w "^${1}:.*" /opt/webinoly/webinoly.conf.exported | cut -f 2 -d ':')
	echo $val
}


check_exported_conf() {
	
	# Check for stack variables
	[[ -n $(conf_read_exported tools-port) ]] && conf_write tools-port $(conf_read_exported tools-port)
	[[ -n $(conf_read_exported fastcgi-conf) ]] && conf_write fastcgi-conf $(conf_read_exported fastcgi-conf)
	[[ -n $(conf_read_exported fd-ratio) ]] && conf_write fd-ratio $(conf_read_exported fd-ratio)
	[[ -n $(conf_read_exported nginx-fd-ratio) ]] && conf_write nginx-fd-ratio $(conf_read_exported nginx-fd-ratio)
	[[ -n $(conf_read_exported swap-mem) ]] && conf_write swap-mem $(conf_read_exported swap-mem)
	[[ -n $(conf_read_exported nginx-ppa) ]] && conf_write nginx-ppa $(conf_read_exported nginx-ppa)
	[[ -n $(conf_read_exported timezone) ]] && conf_write timezone $(conf_read_exported timezone)
	
	[[ -n $(conf_read_exported php-ver) ]] && conf_write php-ver $(conf_read_exported php-ver)
	[[ -n $(conf_read_exported php-info) ]] && conf_write php-info $(conf_read_exported php-info)
	[[ -n $(conf_read_exported max-mb-uploads) ]] && conf_write max-mb-uploads $(conf_read_exported max-mb-uploads)
	[[ -n $(conf_read_exported redis-max-mem) ]] && conf_write redis-max-mem $(conf_read_exported redis-max-mem)
	[[ -n $(conf_read_exported php-max-mem) ]] && conf_write php-max-mem $(conf_read_exported php-max-mem)
	[[ -n $(conf_read_exported php-pm) ]] && conf_write php-pm $(conf_read_exported php-pm)
	[[ -n $(conf_read_exported php-max-child) ]] && conf_write php-max-child $(conf_read_exported php-max-child)
	[[ -n $(conf_read_exported php-max-time) ]] && conf_write php-max-time $(conf_read_exported php-max-time)

	
	# Built stack based on exported conf
	if [[ $(conf_read_exported nginx) == "true" && $(conf_read_exported nginx-tool) == "true" ]]; then
		sudo stack -nginx
	elif [[ $(conf_read_exported nginx) == "true" ]]; then
		sudo stack -nginx -notools
	fi
	
	if [[ $(conf_read_exported php) == "true" && $(conf_read_exported php-tool) == "true" ]]; then
		sudo stack -php
	elif [[ $(conf_read_exported php) == "true" ]]; then
		sudo stack -php -notools
	fi
	
	if [[ $(conf_read_exported mysql) == "true" && $(conf_read_exported mysql-tool) == "true" ]]; then
		sudo stack -mysql
	elif [[ $(conf_read_exported mysql) == "true" ]]; then
		sudo stack -mysql -notools
	elif [[ $(conf_read_exported mysql-client) == "true" ]]; then
		mysql_client_install
	fi

	
	# Load custom conf
	[[ -n $(conf_read_exported login-www-data) ]] && sudo webinoly -login-www-data=on
	[[ -n $(conf_read_exported mail) ]] && sudo webinoly -email=$(conf_read_exported mail)
	[[ -n $(conf_read_exported header-hsts) ]] && sudo webinoly -header-hsts=$(conf_read_exported header-hsts)
	[[ -n $(conf_read_exported header-referrer) ]] && sudo webinoly -header-referrer=$(conf_read_exported header-referrer)
	
	if tar -tvf $file --absolute-names | grep -oq "/opt/webinoly/templates/source/csp_webinoly.data"; then
		tar -C / -xf $file /opt/webinoly/templates/source/csp_webinoly.data --absolute-names
		sudo webinoly -header-csp=reload
	fi
	
	[[ -n $(conf_read_exported log-lines) ]] && conf_write log-lines $(conf_read_exported log-lines)
	[[ -n $(conf_read_exported awsiamrole) ]] && conf_write awsiamrole $(conf_read_exported awsiamrole)
	[[ -n $(conf_read_exported wp-admin-auth) ]] && conf_write wp-admin-auth $(conf_read_exported wp-admin-auth)
	[[ -n $(conf_read_exported global-access-log-off) ]] && conf_write global-access-log-off $(conf_read_exported global-access-log-off)
	[[ -n $(conf_read_exported external-dbh) ]] && conf_write external-dbh $(conf_read_exported external-dbh)
	[[ -n $(conf_read_exported external-dbx) ]] && conf_write external-dbx $(conf_read_exported external-dbx)
	[[ -n $(conf_read_exported external-dbu) ]] && conf_write external-dbu $(conf_read_exported external-dbu)
	[[ -n $(conf_read_exported external-dbp) ]] && conf_write external-dbp $(conf_read_exported external-dbp)
}


export_server() {
	[[ -z $filename ]] && local filename="webinoly_full_backup_$(date +%F)-$(date +%T)"
	
	if [[ -z $destination || $destination =~ ^(default|true)$ ]]; then
		destination="$HOME"
		sudo mkdir -p $destination
	
	# Must start with / and can not end with /
	elif [[ ! -d $destination && $(echo "${destination}" | cut -c-1) == "/" && $(echo "${destination}" | rev | cut -c-1) != "/" ]]; then
		sudo mkdir -p $destination
	fi
	if [[ ! -d $destination || $(echo "${destination}" | rev | cut -c-1) == "/" ]]; then
		echo "${red}[ERROR] Please, enter a valid destination path!${end}"
		exit 1
	fi
	
	# Create Temporary Files
	sudo cp /opt/webinoly/webinoly.conf /opt/webinoly/webinoly.conf.exported
	
	if [[ $(conf_read mysql) == "true" && -z $skip_db && $(check_mysql_connection localhost) == "true" ]]; then
		sudo mysqldump --user=admin --password=$ADMIN_PASS --single-transaction --lock-tables --quick --all-databases > /var/www/webinoly_backup_dball
	fi
	
	if [[ $(conf_read smtp) == "true" ]]; then
		sudo touch /var/www/webinoly_backup_smtp
		echo "$(sudo sed -n 1p /etc/mailname) $(sudo sed -n 1p /etc/postfix/sasl_passwd)" > /var/www/webinoly_backup_smtp
	fi
	
	
	# Create TAR file
	[[ -d /var/www/html ]] && local exclude="--exclude=/var/www/html" || local exclude=""
	[[ -d /var/www/$(conf_read tools-port) ]] && local exclude="$exclude --exclude=/var/www/$(conf_read tools-port)"
	[[ -f /etc/nginx/sites-available/$(conf_read tools-port) ]] && local exclude="$exclude --exclude=/etc/nginx/sites-available/$(conf_read tools-port)"
	[[ -L /etc/nginx/sites-enabled/$(conf_read tools-port) ]] && local exclude="$exclude --exclude=/etc/nginx/sites-enabled/$(conf_read tools-port)"
	[[ -f /etc/nginx/sites-available/default ]] && local exclude="$exclude --exclude=/etc/nginx/sites-available/default"
	[[ -L /etc/nginx/sites-enabled/default ]] && local exclude="$exclude --exclude=/etc/nginx/sites-enabled/default"
	
	[[ -f /opt/webinoly/webinoly.conf.exported ]] && local include="/opt/webinoly/webinoly.conf.exported" || local include=""
	[[ -d /etc/nginx/apps.d ]] && local include="$include /etc/nginx/apps.d"
	[[ -f /etc/nginx/conf.d/blockips.conf ]] && local include="$include /etc/nginx/conf.d/blockips.conf"
	[[ -f /etc/nginx/conf.d/webinoly.conf ]] && local include="$include /etc/nginx/conf.d/webinoly.conf"
	[[ -d /etc/nginx/sites-available ]] && local include="$include /etc/nginx/sites-available"
	[[ -d /etc/nginx/sites-enabled ]] && local include="$include /etc/nginx/sites-enabled"
	[[ -d /var/www ]] && local include="$include /var/www"
	[[ -d /etc/letsencrypt ]] && local include="$include /etc/letsencrypt"
	[[ -f /etc/nginx/.htpasswd ]] && local include="$include /etc/nginx/.htpasswd"
	[[ -f $HOME/.aws/credentials ]] && local include="$include $HOME/.aws/credentials"
	[[ -f /opt/webinoly/templates/source/csp_webinoly.data ]] && local include="$include /opt/webinoly/templates/source/csp_webinoly.data"
	
	sudo tar $exclude -Pcf $destination/$filename $include

	
	# Remove Temporary Files
	sudo rm -rf /opt/webinoly/webinoly.conf.exported
	[[ $(conf_read mysql) == "true" && -z $skip_db ]] && sudo rm -rf /var/www/webinoly_backup_dball
	[[ $(conf_read smtp) == "true" ]] && sudo rm -rf /var/www/webinoly_backup_smtp
	
	if [[ -s $destination/$filename ]]; then
		echo "${gre}Webinoly Complete Server Backup exported successfully!${end}${dim} ($destination/$filename) ${end}"
	else
		[[ -f $destination/$filename ]] && sudo rm -rf $destination/$filename
		echo "${red}[ERROR] Unexpected error occurred while trying to export your server files!${end}"
		exit 1
	fi
}


export_site() {
	[[ -z $filename ]] && local filename="webinoly_${export}_$(date +%F)-$(date +%T)"
	
	if [[ -z $destination || $destination =~ ^(default|true)$ ]]; then
		destination="$HOME"
		sudo mkdir -p $destination
	
	# Must start with / and can not end with /
	elif [[ ! -d $destination && $(echo "${destination}" | cut -c-1) == "/" && $(echo "${destination}" | rev | cut -c-1) != "/" ]]; then
		sudo mkdir -p $destination
	fi
	if [[ ! -d $destination || $(echo "${destination}" | rev | cut -c-1) == "/" ]]; then
		echo "${red}[ERROR] Please, enter a valid destination path!${end}"
		exit 1
	fi
	
	if [[ $(conf_read mysql) == "true" && $(is_wp $export) == "true" && $(is_wp_installed $export) == "true" && -z $skip_db ]]; then
		sudo webinoly -backup=local -wp=$export -destination=/var/www/$export -filename=webinoly_backup_db > /dev/null
	fi
	
	[[ -d /var/www/$export ]] && local include="/var/www/$export" || local include=""
	[[ -s /etc/nginx/sites-available/$export ]] && local include="$include /etc/nginx/sites-available/$export"
	[[ -L /etc/nginx/sites-enabled/$export ]] && local include="$include /etc/nginx/sites-enabled/$export"
	[[ -s /etc/nginx/apps.d/.htpasswd-$export ]] && local include="$include /etc/nginx/apps.d/.htpasswd-$export"
	
	for app in /etc/nginx/apps.d/$export*.conf
	do
		[[ -s $app ]] && local include="$include $app"
	done
	
	sudo tar -Pcf $destination/$filename $include
	
	# Remove temporary files
	sudo rm -rf /var/www/$export/webinoly_backup_db
	
	if [[ -s $destination/$filename ]]; then
		echo "${gre}Webinoly Site Backup${blu} $export ${gre}exported successfully!${end}${dim} ($destination/$filename) ${end}"
	else
		[[ -f $destination/$filename ]] && sudo rm -rf $destination/$filename
		echo "${red}[ERROR] Unexpected error occurred while trying to export your site!${end}"
		exit 1
	fi
}


import_site() {
	if [[ $import =~ ^(stack|full)$ ]]; then
		echo "${red}[ERROR] Site backup file found, stack or full options are not supported!${end}"
		exit 1
	elif ! [[ $import =~ ^(true|sites)$ ]]; then
		echo "${red}[ERROR] Invalid value for import parameter!${end}"
		exit 1
	fi
	
	domain=$(tar -tvf $file --absolute-names | grep -Go --max-count=1 "/etc/nginx/sites-available/.*" | cut -d'/' -f 5 -s)
	if [[ -f /etc/nginx/sites-available/$domain && $overwrite != "on" ]]; then
		echo "${red}[ERROR] Site you are trying to import already exists!${end}"
		exit 1
	elif [[ -f /etc/nginx/sites-available/$domain && $overwrite == "on" ]]; then
		echo "${blu}Site already exists! ${dim} Overwriting...${end}"
	fi
	
	sudo tar -Pxf $file
	
	# Remove old configurations
	remove_nginx_default_server $domain
	source /opt/webinoly/lib/site-ssl
	[[ $(is_ssl $domain) == "true" ]] && revoke="off" && site_ssl_off > /dev/null 2>&1
	
	
	if [[ $(conf_read php) != "true" && ( $(is_wp $domain) == "true" || $(is_php $domain) == "true" ) ]]; then
		echo "${red}[WARNING] Your site may not work because PHP is not installed!${end}"
	fi
	
	if [[ -s /var/www/$domain/webinoly_backup_db && $(conf_read mysql) == "true" && $(check_mysql_connection localhost) == "true" && -z $skip_db ]]; then
		sudo webinoly -db-import -file=/var/www/$domain/webinoly_backup_db
		sudo rm -rf /var/www/$domain/webinoly_backup_db
	
		if [[ $overwrite != "on" ]]; then
			wp_conf_retrieve $domain
			sudo mysql --connect-timeout=10 --user=admin -p$ADMIN_PASS <<_EOF_
CREATE USER '${wp_dbuser}'@'%' IDENTIFIED BY '${wp_dbpass}';
GRANT $(db_user_role) ON ${wp_dbname}.* TO ${wp_dbuser}@${wp_dbhost} IDENTIFIED BY '${wp_dbpass}';
FLUSH PRIVILEGES;
_EOF_

		fi

	elif [[ -f /var/www/$domain/webinoly_backup_db && ( $(conf_read mysql) != "true" || $(check_mysql_connection localhost) != "true" ) && -z $skip_db ]]; then
		echo "${red}[ERROR] Database backup found but can not be restored because MySQL is not installed!${end}"
	fi
		
	echo "${gre}Webinoly Site Backup${blu} $domain ${gre}imported successfully!${end}"
}


import_server() {
	[[ -z $file || $file == "true" ]] && read -p "${blu}Path file to import: ${end}" file
	if [[ ! -s $file ]]; then
		echo "${red}[ERROR] File not found or empty!${end}"
		exit 1
	elif ! [[ $import =~ ^(true|sites|stack|full)$ ]]; then
		echo "${red}[ERROR] Invalid value for import parameter!${end}"
		exit 1
	elif ! tar -tvf $file --absolute-names | grep -o "/opt/webinoly/webinoly.conf.exported"; then
		if tar -tvf $file --absolute-names | grep -Goq "/etc/nginx/sites-available/.*"; then
			import_site
			return
		else
			echo "${red}[ERROR] Invalid File, Webinoly configuration not found!${end}"
			exit 1
		fi
	fi

	if [[ $import =~ ^(stack|full)$ ]]; then
		tar -C / -xf $file /opt/webinoly/webinoly.conf.exported --absolute-names
		check_exported_conf
		echo "${gre}Webinoly Stack Server was built using your imported configuration!${end}"
	fi

	if [[ $import =~ ^(true|sites|full)$ ]]; then
		sudo tar -Pxf $file
		
		# Check imported configuration file to prevent issues
		[[ ! -f /opt/webinoly/webinoly.conf.exported ]] && echo "${red}[ERROR] Exported Configuration file not found!${end}"
		
		if [[ $(conf_read_exported php) == "true" && $(conf_read php) != "true" ]]; then
			echo "${red}[ERROR] PHP is not installed, some exported files may not work properly!${end}"
		fi
		if [[ $(conf_read_exported server-version) != $(conf_read server-version) ]]; then
			echo "${red}[ERROR] Webinoly stack version is different, unexpected errors may occur!${end}"
		fi
		
		if [[ -s /var/www/webinoly_backup_dball && $(conf_read mysql) == "true" && -z $skip_db ]]; then
			sudo webinoly -db-import -file=/var/www/webinoly_backup_dball
			[[ -n $(conf_read_exported mysql-root) ]] && conf_write mysql-root $(conf_read_exported mysql-root)
			[[ -n $(conf_read_exported mysql-admin) ]] && conf_write mysql-admin $(conf_read_exported mysql-admin)
			sudo rm -rf /var/www/webinoly_backup_dball
		elif [[ -s /var/www/webinoly_backup_dball && $(conf_read mysql) != "true" && -z $skip_db ]]; then
			echo "${red}[ERROR] Database backup found but can not be restored because MySQL is not installed!${end}"
		fi
		
		echo "${gre}Webinoly Full Server Backup imported successfully!${end}"
	fi
	
	# SMTP Configuration - should be here after sites are extracted and only if sites are imported.
	if [[ $import == "full" && $(conf_read_exported smtp) == "true" && -s /var/www/webinoly_backup_smtp ]]; then
		local smtpdata=$(sudo sed -n 1p /var/www/webinoly_backup_smtp)
		local main=$(echo $smtpdata | cut -d' ' -f 1 -s)
		local host=$(echo $smtpdata | cut -d' ' -f 2 -s | cut -d':' -f 1 -s)
		local user=$(echo $smtpdata | cut -d' ' -f 3 -s | cut -d':' -f 1 -s)
		local pass=$(echo $smtpdata | cut -d' ' -f 3 -s | cut -d':' -f 2 -s)
		sudo rm -rf /var/www/webinoly_backup_smtp
		
		if [[ -n $host && -n $user && -n $pass && -n $main ]]; then
			sudo webinoly -smtp=[$host,$user,$pass,$main]
		else
			echo "${red}[ERROR] SMTP Configuration recovery failed! ${end}"
		fi
	fi
	
	# Default-Site and Tools Site Settings! - should be here after sites are extracted and only if sites are imported.
	if [[ $import =~ ^(stack|full)$ ]]; then
		if [[ -f /etc/nginx/sites-available/$(conf_read_exported default-site) ]]; then
			remove_nginx_default_server $(conf_read_exported default-site)
			sudo webinoly -default-site=$(conf_read_exported default-site)
		fi
		
		[[ -f /etc/nginx/sites-available/$(conf_read_exported tools-site) ]] && sudo webinoly -tools-site=$(conf_read_exported default-site)
	fi
	
	sudo mv /opt/webinoly/webinoly.conf.exported /opt/webinoly/webinoly.conf.imported_$(date +%F)-$(date +%T)
}


bkp_wizard() {
	echo "${gre}"
	echo " ***********************************"
	echo " ************  Backups  ************"
	echo " ***********************************"
	echo "${blu}"
	echo " 1 - Add AWS S3 Credentials"
	echo " 2 - AWS S3 directory backup"
	echo " 3 - WordPress Database local backup"
	echo " 4 - Restore backup from S3"
	echo " 5 - Run S3 backup"
	echo " 6 - Delete profile"
	echo " 7 - Profile info"
	echo " 8 - List profiles"
	echo " 9 - Export site"
	echo " 10 - Export server"
	echo " 11 - Import server/site"
	echo "${gre}"
	read -p "What do you want to do? ${end}" wzd
	echo ""
	
	if [[ $wzd == 1 ]]; then
		webinoly -aws-s3-credentials
	elif [[ $wzd == 2 ]]; then
		bkp_s3_profile
	elif [[ $wzd == 3 ]]; then
		bkp_local_db
	elif [[ $wzd == 4 ]]; then
		restore="true"
		bkp_s3_profile
	elif [[ $wzd == 5 ]]; then
		run="true"
		bkp_s3_profile
	elif [[ $wzd == 6 ]]; then
		delete="true"
		bkp_s3_profile
	elif [[ $wzd == 7 ]]; then
		info="true"
		bkp_s3_profile
	elif [[ $wzd == 8 ]]; then
		bkp_s3_list
	elif [[ $wzd == 9 ]]; then
		read -p "${blu}Site to export: ${end}" site
		sudo webinoly -backup=local -export=$site
	elif [[ $wzd == 10 ]]; then
		export_server
	elif [[ $wzd == 11 ]]; then
		import_server
	else
		echo "${red}[ERROR] Please, enter a valid option!${end}"
		exit 1
	fi
}
